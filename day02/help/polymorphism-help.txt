多态:
	多态是在继承/实现情况下的一种现象，表现为：对象多态、行为多态
	前提:
		有继承/实现关系; 存在父类引用子类对象; 存在方法重写
	注意事项:
		多态是对象、行为的多态,Java中的属性(成员变量)不谈多态
	好处:
		在多态形式下,右边对象是解耦合的,更便于扩展和维护
		定义方法时，使用父类类型的形参，可以接收一切子类对象，扩展性更强、更便利

	问题:	多态下不能使用子类的独有功能
	解决:	
		类型转换:
			自动类型转换:	父类 变量名 = new 子类();
			强制类型转换:	子类 变量名 = (子类) 父类变量；
		注意事项:
			存在继承/实现关系就可以在编译阶段进行强制类型转换,编译阶段不会报错
			运行时,如果发现对象的真实类型与强转后的类型不同,就会报类型转换异常(ClassCastException)的错误出来,
			例如:	
				People p = new Teacher();
				Student s = (Student) p;	// 此时编译时不会报错,运行时会报类型转换异常(ClassCastException)
			强转前,使用instanceof关键字,判断当前对象的真实类型,再进行强转
			例如:
				p instanceof Teacher	// 返回true、false	=>	再进行强转
