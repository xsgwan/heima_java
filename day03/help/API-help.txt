API(Application Program Interface): 	--应用程序编程接口
	Object类:
		Object类是Java中所有类的祖宗类,因此,Java中所有类的对象都可以直接使用Object类中提供的一些方法
		方法:
			public String toString()		返回对象的字符串表示形式
			public boolean equals(Object o)		判断两个对象是否相等
			protected Object clone()		对象克隆
			浅克隆:
				拷贝出的新对象,与原对象中的数据一模一样(引用类型拷贝的只是地址)
			深克隆:
				对象中基本类型的数据直接拷贝
				对象中的字符串数据拷贝的还是地址
				对象中还包含的其他对象,不会拷贝地址,会创建新对象
	Objects类:
		Objects是一个工具类,提供了很多操作对象的静态方法给我们使用
		方法:
			public static boolean equals(Object a,Object b)		先做非空判断,再比较两个对象
			public static boolean isNull(Object obj)		判断对象是否为null,为null返回true,反之
			public static boolean nonNull(Object obj)		判断对象是否不为null,不为null则返回true,反之
	包装类:
		包装类就是把基本类型的数据包装成对象

		基本数据类型		对应的包装类(引用数据类型)
		byte			Byte
		short			Short
		int			Integer
		long			Long
		char			Character
		float			Float
		double			Double
		boolean			Boolean
	
		Integer:
			基本类型的数据包装成对象的方案
				public Integer(int value):已过时
				public static Integer valueOf(int i)
		自动装箱: 基本数据类型可以自动转换为包装类型
		自动拆箱: 包装类型可以自动转换为基本数据类型

		包装类的其他常见操作
			可以把基本类型的数据转换成字符串类型
				public static String toString(double d)
				public String toString()
			可以把字符串类型的数值转换成数值本身对应的数据类型
				public static int parselnt(String s)
				public static Integer valueOf(String s)
	StringBuilder:
		StringBuilder代表可变字符串对象,相当于是一个容器,它里面装的字符串是可以改变的,就是用来操作字符串的
		好处:
			StringBuilder比String更适合做字符串的修改操作,效率会更高,代码也会更简洁
		构造器:
			public StringBuilder()				创建一个空白的可变的字符串对象,不包含任何内容
			public StringBuilder(String str)		创建一个指定字符串内容的可变字符串对象
		方法名称:
			public StringBuilder append(任意类型)		添加数据并返回StringBuilder对象本身
			public StringBuilder reverse()			将对象的内容反转
			public int length()				返回对象内容长度
			public String toString()			通过toString()就可以实现把StringBuilder转换为
									String

		对于字符串相关的操作,如频繁的拼接、修改等,建议用StringBuidler,效率更高!
		注意:如果操作字符串较少,或者不需要操作,以及定义字符串变量,还是建议用String

	StringBuffer:
		注意:
			StringBuffer的用法与StringBuilder是一模一样的
			但StringBuilder是线程不安全的StringBuffer是线程安全的
