内部类:
	定义:
		是类中的五大成分之一(成员变量、方法、构造器、内部类、代码块),如果一个类定义在另一个类的内部,
		这个类就是内部类
	场景:
		当一个类的内部,包含了一个完整的事物,且这个事物没有必要单独设计时,就可以把这个事物设计成内部类
	形式:
		一、成员内部类
			就是类中的一个普通成员,类似前面我们学过的普通的成员变量、成员方法
			public class Outer {
				// 成员内部类
				public class Inner {
				
				}
			}
			创建内部类对象			Outer.Inner in = new Outer().new Inner();
			内部类实例方法可以直接访问外部类的实例成员、静态成员
			内部类实例方法找到外部类对象	Outer.this
		二、静态内部类
			有staticf修饰的内部类,属于外部类自己持有
			public class Outer{
				// 静态内部类
				public static class Inner{
				
				}
			}
			static修饰	静态内部类与静态成员变量、静态成员方法一样,属于类,使用Outer.Inner()访问
			创建内部类对象                  Outer.Inner in = new Outer.Inner();
			内部类实例方法可以直接访问外部类的静态成员,不可以直接访问外部类的实例成员
		三、局部内部类
			局部内部类是定义在在方法中、代码块中、构造器等执行体中
			比较鸡肋,没什么用
		四、匿名内部类
			匿名内部类就是一种特殊的局部内部类;
			所谓匿名: 指的是程序员不需要为这个类声明名字
			new 类或接口(参数值···){
				类体(一般是方法重写);
			};
			特点:
				匿名内部类本质就是一个子类，并会立即创建出一个子类对象
			作用:
				用于更方便的创建一个子类对象
