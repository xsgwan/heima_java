泛型:
	定义类、接口、方法时,同时声明了一个或者多个类型变量(如: <E>),称为泛型类、泛型接口、泛型方法、它们统称为泛型
	作用:
		泛型提供了在编译阶段约束所能操作的数据类型,并自动进行检查的能力!这样可以避免强制类型转换,
	及其可能出现的异常
	泛型的本质:
		把具体的数据类型作为参数传给类型变量
	注意:
		在泛型中,使用extends关键字来限定类型参数是为了表示泛型参数可以是某个类的子类或者某个接口的实现类。
		虽然接口通常通过implements来实现,但在泛型的语法中,无论是类的继承还是接口的实现,
		都统一使用extends关键字来进行约束
-------------------------------------------------------------------------------------------------------------------
泛型类:
	修饰符 class 类名<类型变量,类型变量,···>{

	}
	public class MyClass<E extends Animal>{
	}		// 传入的类型变量只能是Animal类或者Animal的子类
	限定参数类型使用extends关键字限制参数类型,则实际类型参数必须是某个类的子类,或实现某个接口

泛型接口:
	修饰符 interface 类名<类型变量,类型变量,···>{

        }
	限定参数类型使用extends关键字限制参数类型,则实际类型参数必须是某个类的子类,或实现某个接口

泛型方法:
	修饰符 <类型变量,类型变量,···> 返回值类型 方法名(形参列表) {
		
	}

通配符:
	就是"?",可以在"使用泛型"的时候代表一切类型;
	E, T, K, V是在定义泛型的时候使用

泛型上下限:
	上限:	
		? extends Car:		?能接收的必须是Car或者其子类
	下限:
		? super Car:		?能接收的必须是Car或者其父类

