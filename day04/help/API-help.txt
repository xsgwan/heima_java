API:
	Math类:
		代表数学,是一个工具类,里面提供的都是对数据进行操作的一些静态方法
		常用方法:
			public static int abs(int a)				获取参数绝对值
			public static double ceil(double a)			向上取整
			public static double floor(double a)			向下取整
			public static int round(float a)			四舍五入
			public static int max(int a,int b)			获取两个int值中的较大值
			public static double pow(double a,double b)		返回a的b次幂的值
			public static double random()				返回值为doub1e的随机值，范围[0.0,1.0)
	System类:
		System代表程序所在的系统,也是一个工具类
		常用方法:
			public static void exit(int status)			终止当前运行的Java虚拟机
			public static long currentTimeMillis()			返回当前系统的时间毫秒值形式
			时间毫秒值
				指的是从1970年1月1日 00:00:00走到此刻的总的毫秒数,应该是很大的 1s = 1000ms
	RunTime类:
		代表程序所在的运行环境
		Runtime是一个单例类
		常见方法:
			public static Runtime getRuntime()			返回与当Java应用程序关联的运行时对象
			public void exit(int status)				终止当前运行的虚拟机
			public int availableProcessors()			返回Java虚拟机可用的处理器数
			public long totalMemory()				返回Java虚拟机中的内存总量
			public long freeMemory()				返回Java虚拟机中的可用内存
			public Process exec(String command)			启动某个程序,并返回代表该程序的对象
		exec()方法中的参数是程序所在的地址
	BigDecimal类:
		用于解决浮点型运算时,出现结果失真的问题
		构造器:
			public BigDecima1(double val)				将double转换为BigDecimal	[不推荐]
			public BigDecimal(String val)				把String转成BigDecimal
		常用方法:
			public static BigDecimal valueof(double val)		转换一个double成BigDecimal
			public BigDecimal add(BigDecimal b)			加法
			public BigDecimal subtract(BigDecimal b)		减法
			public BigDecimal multiply(BigDecimal b)		乘法
			public BigDecimal divide(BigDecimal b)			除法
			public BigDecimal divide(另一个BigDecimal对象,精确几位,舍入模式)
										除法、可以控制精确到小数几位
			public double doublevalue()				将BigDecimal转换为double

	
	JDK8之前传统的日期、时间:
		Data类:
			代表日期和时间
			构造器:
				public Date()				创建一个Date对象,代表的是系统当前此刻日期时间
				public Date(long time)			把时间毫秒值转换成Date日期对象
			常用方法:
				public long getTime()			返回从1970年1月1日 00:00:00走到此刻的总的毫秒数
				public void setTime(long time)		设置日期对象的时间为当前时间毫秒值对应的时间
		SimpleDateFormat类:
			代表简单日期格式化,可以用来把日期对象、时间毫秒值格式化成我们想要的形式
			构造器:
				public SimpleDateFormat(String pattern)		创建简单日期格式化对象,并封装时间的格式
			常用方法:	--格式化时间、解析字符串时间成为日期对象
				public final String format(Date date)		将日期格式化成日期/时间字符串
				public final String format(Object time)		将时间毫秒值式化成日期/时间字符串
				public Date parse(String source)		把字符串时间解析成日期对象
			常见时间格式符号:
				y	年
				M	月
				d	日
				H	时
				m	分
				s	秒
				EEE	星期几
				a	上午/下午
			2024-09-19 17:54:20	-->	yyyy-MM-dd HH:mm:ss
			2024年09月19日 17:54:20     -->     yyyy年MM月dd日 HH:mm:ss
		案例:	--秒杀活动
			String接收开始时间、结束时间、用户秒杀时间
			将String类型解析成日期对象
			getTime()把日期对象转转换成时间毫秒值进行比较
		Calendar类:
			代表的是系统此刻时间对应的日历
			通过它可以单独获取、修改时间中的年、月、日、时、分、秒等
			常用方法:
				public static Calendar getInstance()		获取当前日历对象
				public int get(int field)			获取日历中的某个信息
				public final Date getTime()			获取日期对象
				public long getTimeInMillis()			获取时间毫秒值
				public void set(int field,int value)		修改日历的某个信息
				public void add(int field,int amount)		为某个信息增加/减少指定的值
			注意: calendar是可变对象,一旦修改后其对象本身表示的时间将产生变化
	--------------------------------------------------------------------------------------------------------
	JDK8前后时间API区别:
				传统						新增
		1、设计不合理,使用不方便,很多都被淘汰了		1、设计更合理,功能丰富,使用更方便
		2、都是可变对象,修改后				2、都是不可变对象,修改后会返回新的时间对象,
			会丢失最开始的时间信息				不会丢失最开始的时间
		3、线程不安全					3、线程安全
		4、只能精确到毫秒				4、能精确到毫秒、纳秒
	--------------------------------------------------------------------------------------------------------
	JDK8新增时间:
		代替Calendar:
			LocalDate:
				代表本地日期(年、月、日、星期)
			LocalTime:
				代表本地时间(时、分、秒、纳秒)
			LocalDateTime:
				代表本地日期、时间(年、月、日、星期、时、分、秒、纳秒)
				
			获取对象方法:
				public static Xxxx now():获取系统当前时间对应的该对象
					LocaDate ld = LocalDate.now();
					LocalTime lt = LocalTime.now();
					LocalDateTime ldt = LocalDateTime.now();
			常见方法:
				LocalDate:		
					获取本地日期对象(不可变对象)
						LocaDate ld = LocalDate.now();
					获取指定日期的LocalDate对象
						LocalDate ld = LocalDate.of(year, month, dayOfMonth);
					获取日期对象中的信息
						ld.getYear();				// 年
						ld.getMonthValue();			// 月
						ld.getDayOfMonth();			// 日
						ld.getDayOfYear(); 			// 一年中的第几天
						ld.getDayOfWeek().getValue(); 		// 星期几
					直接修改某个信息
						ld.withYear();				// 修改年
						ld.withMonth();				// 修改月
						···
					把某个信息加多少
						ld.plusYears();				// 年
						ld.plusMonths();			// 月
						ld.plusDays();				// 日
						ld.plusWeeks();				// 星期
					把某个信息减多少
						ld.minusYears();			// 年
						ld.minusMonths();                       // 月
						ld.minusDays();                         // 日
						ld.minusWeeks();                        // 星期
					判断2个日期对象,是否相等,在前还是在后:
						ld1.equals(ld2);			// 相等?
						ld1.isBefore(ld2);			// 在前?
						ld1.isAfter(ld2);			// 在后?
				LocalTime:
					获取本地时间对象
						LocalTime lt = LocalTime.now();
					获取指定时间对象
						LocalTime lt = LocalTime.of(hour, minute, second);
					获取时间中的信息
						lt.getHour();				// 时
						lt.getMinute();				// 分
						lt.getSecond(); 			// 秒
						lt.getNano(); 				// 纳秒
					修改时间
						lt.withHour(int hour);			// 时
						lt.withMinute(int minute);		// 分
						lt.withSecond(int second);		// 秒
						lt.withNano(int nano);			// 纳秒
					把某个时间加多少
						lt.plusHours(int hour);			// 时
						lt.plusMinutes(int minute);             // 分
						lt.plusSeconds(int second);             // 秒
						lt.plusNanos(int nano);                 // 纳秒
					把某个时间减多少
						lt.minusHours(int hour);                // 时
						lt.minusMinutes(int minute);            // 分
						lt.minusSeconds(int second);            // 秒
						lt.minusNanos(int nano);                // 纳秒
					判断2个时间对象,是否相等,在前还是在后
						lt1.equals(lt2);                        // 相等?
                                                lt1.isBefore(lt2);                      // 在前?
                                                lt1.isAfter(lt2);			// 在后?
					获取本地日期和时间对象
						LocalDateTime ldt = LocalDateTime.now();
					获取指定日期和时间的LocalDateTime对象
						LocalDateTime ldt8 = LocalDateTime.of(year, month, dayOfMonth,
								hour, minute, second, nanoOfSecond);
					获取日期和时间信息
						ldt.getYear(); 				// 年
						ldt.getMonthValue(); 			// 月
						ldt.getDayOfMonth(); 			// 日
						ldt.getDayOfYear(); 			// 一年中的第几天
						ldt.getDayOfWeek().getValue(); 		// 获取是周几
						ldt.getHour(); 				// 时
						ldt.getMinute(); 			// 分
						ldt.getSecond(); 			// 秒
						ldt.getNano(); 				// 纳秒
					修改时间信息
						ldt.withYear(int year)			// 年
						ldt.withMonth(int month)		// 月
						ldt.withDayOfMonth(int dayOfMonth)	// 日
						ldt.withDayOfYear(int dayOfYear)	// 一年中的第几天
						···
						ldt.withNano(int nanoOfSecond)		// 纳秒
					把日期、时间加多少
						ldt.plusYears(int year)                 // 年
						ldt.plusMonths(int month)               // 月
						ldt.plusWeeks(int week)			// 星期
						ldt.plusDays(int day)			// 天
						···
						ldt.plusNanos(int nanoOfSecond)		// 纳秒
					把日期、时间减多少
						ldt.minusYears(int year)                // 年
                                                ldt.minusMonths(int month)              // 月
						ldt.minusWeeks(int week)                // 星期
						ldt.minusDays(int day)                  // 天
						···
						ldt.minusNanos(int nanoOfSecond)	// 纳秒
					判断2个时间对象,是否相等,在前还是在后
						ldt1.equals(ldt2);                      // 相等?
                                                ldt1.isBefore(ldt2);                    // 在前?
                                                ldt1.isAfter(ldt2);                     // 在后?
					可以把LocalDateTime转换成LocalDate和LocalTime
						public LocalDate toLocalDate()
						public LocalTime toLocalTime()
						public static LocalDateTime.of(LocalDate date,LocalTime time)
				--------------------------------------------------------------------------------
			ZoneId类:		-- 代表时区id
				洲名/城市名:	Asia/Shanghai		Asia/Chongqing
				国家名/城市名:	America/New_York
				常见方法:
					获取系统默认的时区
						ZoneId zoneId = ZoneId.systemDefault();
					获取Java支持的全部时区Id
						public static Set<String>getAvailableZoneIds()
							ZoneId.getAvailableZoneIds();
					把某个时区id封装成ZoneId对象
						public static ZoneId of(String zoneId)
							ZoneId.of(String zoneId);
			ZoneDateTime类:		-- 带时区的时间
				常见方法:
					获取某个时区的ZonedDateTime对象
						ZonedDateTime now = ZonedDateTime.now(zoneId);
						ZonedDateTime now = ZonedDateTime.now(Clock.systemUTC());	
												//世界标准时间
					获取系统默认时区的ZonedDateTime对象
						ZonedDateTime now = ZonedDateTime.now();
					其他常见方法
						与LocalDateTime使用方法一致
						get···()
						with···()
						plus···()
						minus···()
						···

